import json
import logging
from telegram import Update
from telegram.ext import ContextTypes
from config import STAGE_LOGISTICS, STAGE_MENU, STAGE_CASHIER
from assistants.logistics_assistant import LogisticsAssistant
from assistants.cashier_assistant import CashierAssistant
from utils.telegram_utils import send_menu_pdfs

logger = logging.getLogger(__name__)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.web_app_data:
        data = json.loads(update.message.web_app_data.data)
        address = data['address']
        distance = data['distance']
        
        if "–∫–º" in distance:
            distance_km = float(distance.split()[0].replace(',', '.'))
            if distance_km > 30:
                await update.message.reply_text(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∞–¥—Ä–µ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance}). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ - 30 –∫–º.")
                return

        context.user_data['address'] = address
        context.user_data['stage'] = STAGE_MENU
        await update.message.reply_text(f"–ê–¥—Ä–µ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {address}. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance}")
        await send_menu_pdfs(update, context)
        await update.message.reply_text("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å?")
        return

    user_input = update.message.text

    if 'thread' not in context.user_data:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ üçΩÔ∏è" –¥–ª—è –Ω–∞—á–∞–ª–∞.')
        return

    thread = context.user_data['thread']
    current_stage = context.user_data.get('stage', STAGE_LOGISTICS)

    logger.info(f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è: {current_stage}")

    if current_stage == STAGE_MENU:
        context.user_data['stage'] = STAGE_CASHIER
        cashier_assistant = CashierAssistant()
        response = cashier_assistant.process_order(thread, f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑: {user_input}")
        
        message = await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–∫–∞–∑...")
        
        for i in range(len(response)):
            if i % 20 == 0 and i != 0:
                await message.edit_text(response[:i])

        await message.edit_text(response)

    elif current_stage == STAGE_CASHIER:
        cashier_assistant = CashierAssistant()
        response = cashier_assistant.process_order(thread, user_input)
        
        message = await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
        
        for i in range(len(response)):
            if i % 20 == 0 and i != 0:
                await message.edit_text(response[:i])

        await message.edit_text(response)

    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ üçΩÔ∏è' –¥–ª—è –Ω–∞—á–∞–ª–∞.")

    logger.info(f"–ù–æ–≤–∞—è —Å—Ç–∞–¥–∏—è: {context.user_data.get('stage')}")