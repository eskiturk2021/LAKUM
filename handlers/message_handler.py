import logging
from telegram import Update
from telegram.ext import ContextTypes
from config import STAGE_LOGISTICS, STAGE_MENU, STAGE_CASHIER
from assistants.logistics_assistant import LogisticsAssistant
from assistants.cashier_assistant import CashierAssistant
from utils.telegram_utils import send_menu_pdfs

logger = logging.getLogger(__name__)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_input = update.message.text

    if 'thread' not in context.user_data:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ üçΩÔ∏è" –¥–ª—è –Ω–∞—á–∞–ª–∞.')
        return

    thread = context.user_data['thread']
    current_stage = context.user_data.get('stage', STAGE_LOGISTICS)

    logger.info(f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è: {current_stage}")

    if current_stage == STAGE_LOGISTICS:
        logistics_assistant = LogisticsAssistant()
        response = logistics_assistant.process_address(thread, user_input)
        logger.info(f"–û—Ç–≤–µ—Ç –ª–æ–≥–∏—Å—Ç–∞: {response}")

        message = await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∞–¥—Ä–µ—Å...")

        for i in range(len(response)):
            if i % 20 == 0 and i != 0:
                await message.edit_text(response[:i])

        await message.edit_text(response)

        if "–ê–¥—Ä–µ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" in response:
            context.user_data['stage'] = STAGE_MENU
            await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –Ω–∞—à–µ –º–µ–Ω—é.")
            await send_menu_pdfs(update, context)
            await update.message.reply_text("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å?")

    elif current_stage == STAGE_MENU:
        context.user_data['stage'] = STAGE_CASHIER
        cashier_assistant = CashierAssistant()
        response = cashier_assistant.process_order(thread, f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑: {user_input}")

        message = await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–∫–∞–∑...")

        for i in range(len(response)):
            if i % 20 == 0 and i != 0:
                await message.edit_text(response[:i])

        await message.edit_text(response)

    elif current_stage == STAGE_CASHIER:
        cashier_assistant = CashierAssistant()
        response = cashier_assistant.process_order(thread, user_input)

        message = await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")

        for i in range(len(response)):
            if i % 20 == 0 and i != 0:
                await message.edit_text(response[:i])

        await message.edit_text(response)

    else:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ üçΩÔ∏è' –¥–ª—è –Ω–∞—á–∞–ª–∞.")

    logger.info(f"–ù–æ–≤–∞—è —Å—Ç–∞–¥–∏—è: {context.user_data.get('stage')}")