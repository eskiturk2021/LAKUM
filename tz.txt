# Техническое задание: Telegram-бот для заказа осетинских пирогов с использованием API ассистентов OpenAI

## 1. Цель проекта
Разработать Telegram-бота для приема и обработки заказов на доставку осетинских пирогов с использованием API ассистентов OpenAI для обеспечения интеллектуального взаимодействия с клиентами.

## 2. Функциональные требования

### 2.1. Общие требования
- Бот должен работать в Telegram.
- Использовать API ассистентов OpenAI для генерации ответов.
- Обеспечить последовательное взаимодействие с двумя ассистентами: логистом и кассиром.
- Сохранять состояние разговора в потоках (threads) OpenAI.
- Всегда передавать полный контекст разговора ассистентам для обеспечения связности и последовательности взаимодействия.

### 2.2. Логистический ассистент
- Запрашивать у клиента адрес доставки.
- Проверять, находится ли адрес в зоне доставки.
- Запрашивать контактный номер клиента и опционально запасной номер.
- Подтверждать возможность доставки, включая фразу "Адрес подтвержден" в ответ.

### 2.3. Кассир-ассистент
- Принимать заказ клиента после подтверждения адреса доставки.
- Уточнять детали заказа и особые пожелания.
- Формировать итоговый заказ с указанием цен и общей суммы.
- Предоставлять информацию о продуктах по запросу клиента.

### 2.4. Процесс заказа
1. Клиент начинает диалог с ботом командой /start.
2. Создается новый поток (thread) в OpenAI и запускается логистический ассистент.
3. После подтверждения адреса бот отправляет меню в виде PDF-файлов.
4. Происходит переключение на кассира-ассистента для обработки заказа.
5. Кассир-ассистент обрабатывает заказ и предоставляет итоговую информацию.

## 3. Технические требования

### 3.1. Языки и фреймворки
- Язык программирования: Python 3.8+
- Фреймворк для Telegram-бота: python-telegram-bot
- API: OpenAI API (версия с поддержкой ассистентов)

### 3.2. Интеграции
- Telegram Bot API
- OpenAI API (GPT-4 или новее)

### 3.3. Структура проекта и файловая организация
Проект должен быть логически разделен на несколько файлов для улучшения читаемости, поддерживаемости и масштабируемости кода:

- `main.py`: точка входа приложения, инициализация бота и основной цикл обработки сообщений
- `config.py`: конфигурационный файл с настройками и константами
- `assistants/`:
  - `__init__.py`
  - `base_assistant.py`: базовый класс для ассистентов
  - `logistics_assistant.py`: класс логистического ассистента
  - `cashier_assistant.py`: класс ассистента-кассира
- `handlers/`:
  - `__init__.py`
  - `start_handler.py`: обработчик команды /start
  - `message_handler.py`: обработчик текстовых сообщений
- `utils/`:
  - `__init__.py`
  - `openai_utils.py`: утилиты для работы с API OpenAI
  - `telegram_utils.py`: утилиты для работы с Telegram API
- `menu1.pdf`, `menu2.pdf`: файлы меню

### 3.4. Конфигурация
- Хранение API ключей и токенов в переменных окружения или в `config.py`
- Настройка ID ассистентов OpenAI в конфигурационном файле:
  - `CASHIER_ASSISTANT_ID`
  - `LOGISTIC_ASSISTANT_ID`

### 3.5. Функции для работы с API ассистентов
- `create_thread_and_run`: создание нового потока и запуск ассистента
- `submit_message`: отправка сообщения в поток и создание нового запуска (run)
- `get_response`: получение ответов из потока
- `wait_on_run`: ожидание завершения выполнения ассистента

### 3.6. Передача контекста
- Реализовать механизм сохранения и передачи полного контекста разговора при каждом обращении к ассистентам.
- Обеспечить передачу всей истории взаимодействия, включая переключения между ассистентами.

## 4. Требования к безопасности
- Безопасное хранение API ключей и токенов
- Обработка ошибок и исключений для предотвращения утечки конфиденциальной информации

## 5. Особенности реализации
- Использование асинхронных функций для работы с Telegram API
- Реализация конечного автомата для управления стадиями разговора (логистика, меню, кассир)
- Отправка PDF-файлов меню через Telegram Bot API
- Обеспечение бесшовного переключения между ассистентами с сохранением контекста

## 6. Тестирование
- Модульное тестирование основных функций
- Интеграционное тестирование взаимодействия с API OpenAI и Telegram
- Сквозное тестирование процесса заказа
- Тестирование сохранения и передачи контекста между ассистентами

## 7. Документация
- Руководство по установке и настройке
- Документация по API и основным функциям
- Инструкция по использованию для конечных пользователей
- Описание архитектуры проекта и взаимодействия компонентов

## 8. Поддержка и обновление
- План по регулярному обновлению зависимостей
- Мониторинг производительности и обработка ошибок
- Сбор обратной связи от пользователей для улучшения функциональности

## 9. Дополнительные требования
- Реализовать обработку случаев, когда ассистент не отвечает или происходит ошибка
- Предусмотреть возможность легкого добавления новых ассистентов или изменения их функциональности
- Обеспечить логирование всех взаимодействий для последующего анализа и улучшения работы бота
- Реализовать механизм отката к предыдущему состоянию в случае ошибок или неожиданного поведения ассистентов